name: Docker Build & Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  release:
    types: [ published ]

env:
  REGISTRY_DOCKER: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: mildman1848/audiobookshelf

jobs:
  build-and-push:
    name: Build and Push Multi-Platform Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Audiobookshelf
            org.opencontainers.image.description=Self-hosted audiobook and podcast server based on LinuxServer.io Alpine
            org.opencontainers.image.vendor=mildman1848
            org.opencontainers.image.licenses=GPL-3.0

      - name: Get Audiobookshelf version
        id: abs_version
        run: |
          # Extract version from .env.example or use default
          ABS_VERSION=$(grep "AUDIOBOOKSHELF_VERSION=" .env.example | cut -d'=' -f2 | tr -d '"' || echo "v2.29.0")
          echo "version=${ABS_VERSION}" >> $GITHUB_OUTPUT
          echo "Audiobookshelf version: ${ABS_VERSION}"

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
            AUDIOBOOKSHELF_VERSION=${{ steps.abs_version.outputs.version }}

      - name: Generate SBOM attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Run vulnerability scan on built image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          body: |
            ## üê≥ Docker Images

            **Multi-Platform Support:**
            - `linux/amd64`
            - `linux/arm64`
            - `linux/arm/v7`

            **Docker Hub:**
            ```bash
            docker pull ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            **GitHub Container Registry:**
            ```bash
            docker pull ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            **Based on:**
            - Audiobookshelf ${{ steps.abs_version.outputs.version }}
            - LinuxServer.io Alpine Baseimage 3.22
            - S6 Overlay v3

            ## üöÄ Quick Start

            ```bash
            git clone https://github.com/mildman1848/audiobookshelf.git
            cd audiobookshelf
            make setup
            docker-compose up -d
            ```

            ## üîí Security

            This release includes automated vulnerability scanning and SBOM attestation for enhanced security.

  update-docker-hub-description:
    name: Update Docker Hub Description
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Update Docker Hub Repository Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          short-description: "Production-ready Audiobookshelf Docker image based on LinuxServer.io Alpine with S6 Overlay and security hardening"
          readme-filepath: ./README.md

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Delete old GitHub Container Registry images
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'audiobookshelf'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true